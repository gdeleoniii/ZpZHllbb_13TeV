#include <vector>
#include <string>
#include <fstream>
#include <iostream>
#include <TH1.h>
#include <TLatex.h>
#include <TCanvas.h>
#include <TLegend.h>
#include <TClonesArray.h>
#include <TLorentzVector.h>
#include <TGraphAsymmErrors.h>
#include "/afs/cern.ch/work/h/htong/ZpZHllbb_13TeV/untuplizer.h"
#include "/afs/cern.ch/work/h/htong/ZpZHllbb_13TeV/isPassZmumu.h"

float crossSection(string thisPath){

  ifstream textFile("/afs/cern.ch/work/h/htong/ZpZHllbb_13TeV/xSec.txt");
  string token;
  float crosssection = 0., thisNum = 0.;

  while( textFile >> token >> thisNum ){

    if( thisPath.find(token) != string::npos )
      crosssection = thisNum;

  }
  
  return crosssection;

}

void muBtagEff(string inputFile, string outputFile){
  
  // read the ntuples (in pcncu)
  
  TreeReader data(inputFile.data());

  TFile* f = new TFile(inputFile.data());
  TH1D* h_totalEvents = (TH1D*)f->Get("h_totalEv");

  // Create a tree to store variables

  TFile* outFile = new TFile(Form("%s_MCbtagEff.root",outputFile.c_str()), "recreate");
  TTree* tree = new TTree("tree", "TreeForBtagEff");

  Int_t cat, jetFlavor;
  Float_t jetPt, evweight;

  tree->Branch("cat",       &cat,       "cat/I");
  tree->Branch("jetFlavor", &jetFlavor, "jetFlavor/I");
  tree->Branch("jetPt",     &jetPt,     "jetPt/F");
  tree->Branch("evweight",  &evweight,  "evweight/F");

  // Calculate the scale correspond to inputFile

  Float_t scale = 2512.*crossSection(outputFile.data())/h_totalEvents->Integral();

  // begin of event loop

  fprintf(stdout, "Total events %lli\n", data.GetEntriesFast());

  for( Long64_t ev = data.GetEntriesFast()-1; ev >= 0; --ev ){

    if( (unsigned)ev % 100000 == 0 )
      fprintf(stdout, "Still left events %lli\n", ev);

    data.GetEntry(ev);

    TClonesArray*  muP4              = (TClonesArray*) data.GetPtrTObject("muP4");
    Int_t          FATnJet           = data.GetInt("FATnJet");    
    Int_t*         FATnSubSDJet      = data.GetPtrInt("FATnSubSDJet");
    Float_t*       FATjetPRmassCorr  = data.GetPtrFloat("FATjetPRmassL2L3Corr");
    TClonesArray*  FATjetP4          = (TClonesArray*) data.GetPtrTObject("FATjetP4");
    vector<bool>&  FATjetPassIDLoose = *((vector<bool>*) data.GetPtr("FATjetPassIDLoose"));
    vector<float>* FATsubjetSDCSV    = data.GetPtrVectorFloat("FATsubjetSDCSV", FATnJet);
    vector<int>*   subjetFlavor      = data.GetPtrVectorInt("FATsubjetSDHadronFlavor", FATnJet);

    // select good reco level events     
    // select good leptons
      
    vector<int> goodLepID;

    if( !isPassZmumu(data,goodLepID) ) continue;

    TLorentzVector* thisLep = (TLorentzVector*)muP4->At(goodLepID[0]);
    TLorentzVector* thatLep = (TLorentzVector*)muP4->At(goodLepID[1]);

    // select good FATjet

    bool bTag = false;
    int goodFATJetID = -1;
    TLorentzVector thisJet(0,0,0,0);

    for( int ij = 0; ij < FATnJet; ++ij ){

      TLorentzVector* myJet = (TLorentzVector*)FATjetP4->At(ij);

      if( myJet->Pt() < 200 ) continue;
      if( fabs(myJet->Eta()) > 2.4 ) continue;
      if( !FATjetPassIDLoose[ij] ) continue;
      if( myJet->DeltaR(*thisLep) < 0.8 || myJet->DeltaR(*thatLep) < 0.8 ) continue;
      if( FATjetPRmassCorr[ij] < 105 || FATjetPRmassCorr[ij] > 135 ) continue;

      int nsubBjet = 0;

      for( int is = 0; is < FATnSubSDJet[ij]; ++is ){

	if( FATsubjetSDCSV[ij][is] > 0.605 ) ++nsubBjet;

      } // end of subjet for loop
 
      // Tag b-tag
 
      if     ( nsubBjet == 1 ) cat = 1;
      else if( nsubBjet == 2 ) cat = 2;
      else                     cat = 0;
       
      goodFATJetID = ij;

      // Tag jet flavor (MC only)                                                                                                                                                           
      /*
      if     ( subjetFlavor[ij][is] == 1 || subjetFlavor[ij][is] == 2 || subjetFlavor[ij][is] == 3 || subjetFlavor[ij][is] == 21 ) jetFlavor = 1;
      else if( subjetFlavor[ij][is] == 4 ) jetFlavor = 4;
      else if( subjetFlavor[ij][is] == 5 ) jetFlavor = 5;
      else                                 jetFlavor = 0;
      */
      thisJet = *myJet;

      break;
 
    } // end of fatjet loop
 
    if( goodFATJetID < 0 ) continue;

    if( (*thisLep+*thatLep+thisJet).M() < 750 ) continue;

    jetPt = thisJet.Pt();
    evweight = eventWeight * scale;

    tree->Fill();

  } // end of event loop
  
  fprintf(stdout, "Processed all events\n");

  tree->Write();  
  outFile->Write();

  delete f;
  delete outFile;

}
